/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface CreatureAccessoryInterface extends Interface {
  functions: {
    balanceOf: TypedFunctionDescription<{
      encode([account, id]: [string, BigNumberish]): string;
    }>;

    balanceOfBatch: TypedFunctionDescription<{
      encode([accounts, ids]: [string[], BigNumberish[]]): string;
    }>;

    burn: TypedFunctionDescription<{
      encode([account, id, value]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    burnBatch: TypedFunctionDescription<{
      encode([account, ids, values]: [
        string,
        BigNumberish[],
        BigNumberish[]
      ]): string;
    }>;

    create: TypedFunctionDescription<{
      encode([_initialOwner, _id, _initialSupply, _uri, _data]: [
        string,
        BigNumberish,
        BigNumberish,
        string,
        Arrayish
      ]): string;
    }>;

    creators: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    isApprovedForAll: TypedFunctionDescription<{
      encode([account, operator]: [string, string]): string;
    }>;

    mint: TypedFunctionDescription<{
      encode([to, id, amount]: [string, BigNumberish, BigNumberish]): string;
    }>;

    mintBatch: TypedFunctionDescription<{
      encode([to, ids, amounts]: [
        string,
        BigNumberish[],
        BigNumberish[]
      ]): string;
    }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    paused: TypedFunctionDescription<{ encode([]: []): string }>;

    renounceOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    royaltyInfo: TypedFunctionDescription<{
      encode([_tokenId, _salePrice]: [BigNumberish, BigNumberish]): string;
    }>;

    safeBatchTransferFrom: TypedFunctionDescription<{
      encode([from, to, ids, amounts, data]: [
        string,
        string,
        BigNumberish[],
        BigNumberish[],
        Arrayish
      ]): string;
    }>;

    safeTransferFrom: TypedFunctionDescription<{
      encode([from, to, id, amount, data]: [
        string,
        string,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    setApprovalForAll: TypedFunctionDescription<{
      encode([operator, approved]: [string, boolean]): string;
    }>;

    setCustomURI: TypedFunctionDescription<{
      encode([_tokenId, _newURI]: [BigNumberish, string]): string;
    }>;

    setURI: TypedFunctionDescription<{ encode([_newURI]: [string]): string }>;

    supportsInterface: TypedFunctionDescription<{
      encode([interfaceId]: [Arrayish]): string;
    }>;

    tokenSupply: TypedFunctionDescription<{
      encode([]: [BigNumberish]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([newOwner]: [string]): string;
    }>;

    uri: TypedFunctionDescription<{ encode([_id]: [BigNumberish]): string }>;
  };

  events: {
    ApprovalForAll: TypedEventDescription<{
      encodeTopics([account, operator, approved]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;

    Paused: TypedEventDescription<{
      encodeTopics([account]: [null]): string[];
    }>;

    TransferBatch: TypedEventDescription<{
      encodeTopics([operator, from, to, ids, values]: [
        string | null,
        string | null,
        string | null,
        null,
        null
      ]): string[];
    }>;

    TransferSingle: TypedEventDescription<{
      encodeTopics([operator, from, to, id, value]: [
        string | null,
        string | null,
        string | null,
        null,
        null
      ]): string[];
    }>;

    URI: TypedEventDescription<{
      encodeTopics([value, id]: [null, BigNumberish | null]): string[];
    }>;

    Unpaused: TypedEventDescription<{
      encodeTopics([account]: [null]): string[];
    }>;
  };
}

export class CreatureAccessory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): CreatureAccessory;
  attach(addressOrName: string): CreatureAccessory;
  deployed(): Promise<CreatureAccessory>;

  on(event: EventFilter | string, listener: Listener): CreatureAccessory;
  once(event: EventFilter | string, listener: Listener): CreatureAccessory;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): CreatureAccessory;
  removeAllListeners(eventName: EventFilter | string): CreatureAccessory;
  removeListener(eventName: any, listener: Listener): CreatureAccessory;

  interface: CreatureAccessoryInterface;

  functions: {
    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber[]>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber[]>;

    burn(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "burn(address,uint256,uint256)"(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    burnBatch(
      account: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "burnBatch(address,uint256[],uint256[])"(
      account: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    create(
      _initialOwner: string,
      _id: BigNumberish,
      _initialSupply: BigNumberish,
      _uri: string,
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "create(address,uint256,uint256,string,bytes)"(
      _initialOwner: string,
      _id: BigNumberish,
      _initialSupply: BigNumberish,
      _uri: string,
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    creators(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "creators(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    mint(
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "mint(address,uint256,uint256)"(
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    mintBatch(
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "mintBatch(address,uint256[],uint256[])"(
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    owner(overrides?: UnsignedTransaction): Promise<string>;

    "owner()"(overrides?: UnsignedTransaction): Promise<string>;

    paused(overrides?: UnsignedTransaction): Promise<boolean>;

    "paused()"(overrides?: UnsignedTransaction): Promise<boolean>;

    renounceOwnership(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    royaltyInfo(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<[string, BigNumber]>;

    "royaltyInfo(uint256,uint256)"(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<[string, BigNumber]>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setCustomURI(
      _tokenId: BigNumberish,
      _newURI: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setCustomURI(uint256,string)"(
      _tokenId: BigNumberish,
      _newURI: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setURI(
      _newURI: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setURI(string)"(
      _newURI: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    tokenSupply(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "tokenSupply(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    uri(_id: BigNumberish, overrides?: UnsignedTransaction): Promise<string>;

    "uri(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;
  };

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "balanceOf(address,uint256)"(
    account: string,
    id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: UnsignedTransaction
  ): Promise<BigNumber[]>;

  "balanceOfBatch(address[],uint256[])"(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: UnsignedTransaction
  ): Promise<BigNumber[]>;

  burn(
    account: string,
    id: BigNumberish,
    value: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "burn(address,uint256,uint256)"(
    account: string,
    id: BigNumberish,
    value: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  burnBatch(
    account: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "burnBatch(address,uint256[],uint256[])"(
    account: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  create(
    _initialOwner: string,
    _id: BigNumberish,
    _initialSupply: BigNumberish,
    _uri: string,
    _data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "create(address,uint256,uint256,string,bytes)"(
    _initialOwner: string,
    _id: BigNumberish,
    _initialSupply: BigNumberish,
    _uri: string,
    _data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  creators(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "creators(uint256)"(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    account: string,
    operator: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  mint(
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "mint(address,uint256,uint256)"(
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  mintBatch(
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "mintBatch(address,uint256[],uint256[])"(
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  owner(overrides?: UnsignedTransaction): Promise<string>;

  "owner()"(overrides?: UnsignedTransaction): Promise<string>;

  paused(overrides?: UnsignedTransaction): Promise<boolean>;

  "paused()"(overrides?: UnsignedTransaction): Promise<boolean>;

  renounceOwnership(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  royaltyInfo(
    _tokenId: BigNumberish,
    _salePrice: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<[string, BigNumber]>;

  "royaltyInfo(uint256,uint256)"(
    _tokenId: BigNumberish,
    _salePrice: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<[string, BigNumber]>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,uint256,bytes)"(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setCustomURI(
    _tokenId: BigNumberish,
    _newURI: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setCustomURI(uint256,string)"(
    _tokenId: BigNumberish,
    _newURI: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setURI(
    _newURI: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setURI(string)"(
    _newURI: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  tokenSupply(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "tokenSupply(uint256)"(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  uri(_id: BigNumberish, overrides?: UnsignedTransaction): Promise<string>;

  "uri(uint256)"(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  filters: {
    ApprovalForAll(
      account: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Paused(account: null): EventFilter;

    TransferBatch(
      operator: string | null,
      from: string | null,
      to: string | null,
      ids: null,
      values: null
    ): EventFilter;

    TransferSingle(
      operator: string | null,
      from: string | null,
      to: string | null,
      id: null,
      value: null
    ): EventFilter;

    URI(value: null, id: BigNumberish | null): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimate: {
    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    burn(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "burn(address,uint256,uint256)"(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    burnBatch(
      account: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "burnBatch(address,uint256[],uint256[])"(
      account: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    create(
      _initialOwner: string,
      _id: BigNumberish,
      _initialSupply: BigNumberish,
      _uri: string,
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "create(address,uint256,uint256,string,bytes)"(
      _initialOwner: string,
      _id: BigNumberish,
      _initialSupply: BigNumberish,
      _uri: string,
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    creators(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "creators(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    mint(
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "mint(address,uint256,uint256)"(
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    mintBatch(
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "mintBatch(address,uint256[],uint256[])"(
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    owner(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "owner()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    paused(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "paused()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    renounceOwnership(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    royaltyInfo(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "royaltyInfo(uint256,uint256)"(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setCustomURI(
      _tokenId: BigNumberish,
      _newURI: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setCustomURI(uint256,string)"(
      _tokenId: BigNumberish,
      _newURI: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setURI(
      _newURI: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setURI(string)"(
      _newURI: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    tokenSupply(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "tokenSupply(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    uri(_id: BigNumberish, overrides?: UnsignedTransaction): Promise<BigNumber>;

    "uri(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;
  };
}
