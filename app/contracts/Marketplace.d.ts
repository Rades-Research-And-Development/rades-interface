/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface MarketplaceInterface extends Interface {
  functions: {
    auctionIdCounter: TypedFunctionDescription<{ encode([]: []): string }>;

    auctions: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    bid: TypedFunctionDescription<{
      encode([auctionId, amountFromBalance, externalFunds]: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    bids: TypedFunctionDescription<{
      encode([,]: [BigNumberish, string]): string;
    }>;

    buy: TypedFunctionDescription<{
      encode([saleId, recipient, amountToBuy, amountFromBalance]: [
        BigNumberish,
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    cancelAuction: TypedFunctionDescription<{
      encode([auctionId]: [BigNumberish]): string;
    }>;

    cancelSale: TypedFunctionDescription<{
      encode([saleId]: [BigNumberish]): string;
    }>;

    cancelledAuction: TypedFunctionDescription<{
      encode([]: [BigNumberish]): string;
    }>;

    cancelledSale: TypedFunctionDescription<{
      encode([]: [BigNumberish]): string;
    }>;

    claimFunds: TypedFunctionDescription<{
      encode([tokenAddress]: [string]): string;
    }>;

    claimSaleNfts: TypedFunctionDescription<{
      encode([saleId]: [BigNumberish]): string;
    }>;

    claimableFunds: TypedFunctionDescription<{
      encode([,]: [string, string]): string;
    }>;

    claimed: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    createAuction: TypedFunctionDescription<{
      encode([
        isERC721,
        nftAddress,
        nftId,
        startTime,
        endTime,
        reservePrice,
        currency,
      ]: [
        boolean,
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    createSale: TypedFunctionDescription<{
      encode([
        isERC721,
        nftAddress,
        nftId,
        amount,
        startTime,
        endTime,
        price,
        currency,
      ]: [
        boolean,
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    escrow: TypedFunctionDescription<{ encode([]: [string]): string }>;

    getAuctionStatus: TypedFunctionDescription<{
      encode([auctionId]: [BigNumberish]): string;
    }>;

    getAuctions: TypedFunctionDescription<{
      encode([pageNo, pageSize]: [BigNumberish, BigNumberish]): string;
    }>;

    getSaleStatus: TypedFunctionDescription<{
      encode([saleId]: [BigNumberish]): string;
    }>;

    getSales: TypedFunctionDescription<{
      encode([pageNo, pageSize]: [BigNumberish, BigNumberish]): string;
    }>;

    highestBidder: TypedFunctionDescription<{
      encode([]: [BigNumberish]): string;
    }>;

    onERC1155BatchReceived: TypedFunctionDescription<{
      encode([, , , ,]: [
        string,
        string,
        BigNumberish[],
        BigNumberish[],
        Arrayish
      ]): string;
    }>;

    onERC1155Received: TypedFunctionDescription<{
      encode([, , , ,]: [
        string,
        string,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    onERC721Received: TypedFunctionDescription<{
      encode([, , ,]: [string, string, BigNumberish, Arrayish]): string;
    }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    purchased: TypedFunctionDescription<{
      encode([,]: [BigNumberish, string]): string;
    }>;

    renounceOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    resolveAuction: TypedFunctionDescription<{
      encode([auctionId]: [BigNumberish]): string;
    }>;

    saleIdCounter: TypedFunctionDescription<{ encode([]: []): string }>;

    sales: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    supportsInterface: TypedFunctionDescription<{
      encode([interfaceId]: [Arrayish]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([newOwner]: [string]): string;
    }>;
  };

  events: {
    AuctionCancelled: TypedEventDescription<{
      encodeTopics([auctionId]: [BigNumberish | null]): string[];
    }>;

    BalanceUpdated: TypedEventDescription<{
      encodeTopics([accountOf, tokenAddress, newBalance]: [
        string | null,
        string | null,
        BigNumberish | null
      ]): string[];
    }>;

    BidPlaced: TypedEventDescription<{
      encodeTopics([auctionId, totalAmount]: [
        BigNumberish | null,
        null
      ]): string[];
    }>;

    ClaimAuctionNFT: TypedEventDescription<{
      encodeTopics([auctionId, claimer, recipient, amount]: [
        BigNumberish | null,
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    ClaimFunds: TypedEventDescription<{
      encodeTopics([accountOf, tokenAddress, newBalance]: [
        string | null,
        string | null,
        BigNumberish | null
      ]): string[];
    }>;

    ClaimSaleNFTs: TypedEventDescription<{
      encodeTopics([id, owner, amount]: [
        BigNumberish | null,
        string | null,
        BigNumberish | null
      ]): string[];
    }>;

    NewAuction: TypedEventDescription<{
      encodeTopics([auctionId, newAuction]: [
        BigNumberish | null,
        null
      ]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;

    Purchase: TypedEventDescription<{
      encodeTopics([saleId, purchaser, recipient]: [
        BigNumberish | null,
        string | null,
        string | null
      ]): string[];
    }>;

    SaleCancelled: TypedEventDescription<{
      encodeTopics([saleId]: [BigNumberish | null]): string[];
    }>;

    SaleCreated: TypedEventDescription<{
      encodeTopics([id, nftAddress, nftID]: [
        BigNumberish | null,
        string | null,
        BigNumberish | null
      ]): string[];
    }>;
  };
}

export class Marketplace extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Marketplace;
  attach(addressOrName: string): Marketplace;
  deployed(): Promise<Marketplace>;

  on(event: EventFilter | string, listener: Listener): Marketplace;
  once(event: EventFilter | string, listener: Listener): Marketplace;
  addListener(eventName: EventFilter | string, listener: Listener): Marketplace;
  removeAllListeners(eventName: EventFilter | string): Marketplace;
  removeListener(eventName: any, listener: Listener): Marketplace;

  interface: MarketplaceInterface;

  functions: {
    auctionIdCounter(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "auctionIdCounter()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    auctions(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      [
        BigNumber,
        BigNumber,
        boolean,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        nftId: BigNumber;
        isERC721: boolean;
        nftAddress: string;
        owner: string;
        currency: string;
        startTime: BigNumber;
        endTime: BigNumber;
        reservePrice: BigNumber;
      }
    >;

    "auctions(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      [
        BigNumber,
        BigNumber,
        boolean,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        nftId: BigNumber;
        isERC721: boolean;
        nftAddress: string;
        owner: string;
        currency: string;
        startTime: BigNumber;
        endTime: BigNumber;
        reservePrice: BigNumber;
      }
    >;

    bid(
      auctionId: BigNumberish,
      amountFromBalance: BigNumberish,
      externalFunds: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "bid(uint256,uint256,uint256)"(
      auctionId: BigNumberish,
      amountFromBalance: BigNumberish,
      externalFunds: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    bids(
      arg0: BigNumberish,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; timestamp: BigNumber }
    >;

    "bids(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; timestamp: BigNumber }
    >;

    buy(
      saleId: BigNumberish,
      recipient: string,
      amountToBuy: BigNumberish,
      amountFromBalance: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "buy(uint256,address,uint256,uint256)"(
      saleId: BigNumberish,
      recipient: string,
      amountToBuy: BigNumberish,
      amountFromBalance: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    cancelAuction(
      auctionId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "cancelAuction(uint256)"(
      auctionId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    cancelSale(
      saleId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "cancelSale(uint256)"(
      saleId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    cancelledAuction(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "cancelledAuction(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    cancelledSale(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "cancelledSale(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    claimFunds(
      tokenAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "claimFunds(address)"(
      tokenAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    claimSaleNfts(
      saleId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "claimSaleNfts(uint256)"(
      saleId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    claimableFunds(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "claimableFunds(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    claimed(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "claimed(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    createAuction(
      isERC721: boolean,
      nftAddress: string,
      nftId: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      reservePrice: BigNumberish,
      currency: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "createAuction(bool,address,uint128,uint256,uint256,uint256,address)"(
      isERC721: boolean,
      nftAddress: string,
      nftId: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      reservePrice: BigNumberish,
      currency: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    createSale(
      isERC721: boolean,
      nftAddress: string,
      nftId: BigNumberish,
      amount: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      price: BigNumberish,
      currency: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "createSale(bool,address,uint128,uint256,uint256,uint256,uint256,address)"(
      isERC721: boolean,
      nftAddress: string,
      nftId: BigNumberish,
      amount: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      price: BigNumberish,
      currency: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    escrow(arg0: string, overrides?: UnsignedTransaction): Promise<BigNumber>;

    "escrow(address)"(
      arg0: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getAuctionStatus(
      auctionId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "getAuctionStatus(uint256)"(
      auctionId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    getAuctions(
      pageNo: BigNumberish,
      pageSize: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      ([
        BigNumber,
        BigNumber,
        boolean,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        nftId: BigNumber;
        isERC721: boolean;
        nftAddress: string;
        owner: string;
        currency: string;
        startTime: BigNumber;
        endTime: BigNumber;
        reservePrice: BigNumber;
      })[]
    >;

    "getAuctions(uint256,uint256)"(
      pageNo: BigNumberish,
      pageSize: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      ([
        BigNumber,
        BigNumber,
        boolean,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        nftId: BigNumber;
        isERC721: boolean;
        nftAddress: string;
        owner: string;
        currency: string;
        startTime: BigNumber;
        endTime: BigNumber;
        reservePrice: BigNumber;
      })[]
    >;

    getSaleStatus(
      saleId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "getSaleStatus(uint256)"(
      saleId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    getSales(
      pageNo: BigNumberish,
      pageSize: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      ([
        BigNumber,
        boolean,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        nftId: BigNumber;
        isERC721: boolean;
        nftAddress: string;
        owner: string;
        currency: string;
        amount: BigNumber;
        purchased: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        price: BigNumber;
      })[]
    >;

    "getSales(uint256,uint256)"(
      pageNo: BigNumberish,
      pageSize: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      ([
        BigNumber,
        boolean,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        nftId: BigNumber;
        isERC721: boolean;
        nftAddress: string;
        owner: string;
        currency: string;
        amount: BigNumber;
        purchased: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        price: BigNumber;
      })[]
    >;

    highestBidder(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "highestBidder(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    owner(overrides?: UnsignedTransaction): Promise<string>;

    "owner()"(overrides?: UnsignedTransaction): Promise<string>;

    purchased(
      arg0: BigNumberish,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "purchased(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    resolveAuction(
      auctionId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "resolveAuction(uint256)"(
      auctionId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    saleIdCounter(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "saleIdCounter()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    sales(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      [
        BigNumber,
        boolean,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        nftId: BigNumber;
        isERC721: boolean;
        nftAddress: string;
        owner: string;
        currency: string;
        amount: BigNumber;
        purchased: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        price: BigNumber;
      }
    >;

    "sales(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      [
        BigNumber,
        boolean,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        nftId: BigNumber;
        isERC721: boolean;
        nftAddress: string;
        owner: string;
        currency: string;
        amount: BigNumber;
        purchased: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        price: BigNumber;
      }
    >;

    supportsInterface(
      interfaceId: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;
  };

  auctionIdCounter(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "auctionIdCounter()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  auctions(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    [
      BigNumber,
      BigNumber,
      boolean,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      nftId: BigNumber;
      isERC721: boolean;
      nftAddress: string;
      owner: string;
      currency: string;
      startTime: BigNumber;
      endTime: BigNumber;
      reservePrice: BigNumber;
    }
  >;

  "auctions(uint256)"(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    [
      BigNumber,
      BigNumber,
      boolean,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      nftId: BigNumber;
      isERC721: boolean;
      nftAddress: string;
      owner: string;
      currency: string;
      startTime: BigNumber;
      endTime: BigNumber;
      reservePrice: BigNumber;
    }
  >;

  bid(
    auctionId: BigNumberish,
    amountFromBalance: BigNumberish,
    externalFunds: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "bid(uint256,uint256,uint256)"(
    auctionId: BigNumberish,
    amountFromBalance: BigNumberish,
    externalFunds: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  bids(
    arg0: BigNumberish,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; timestamp: BigNumber }
  >;

  "bids(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; timestamp: BigNumber }
  >;

  buy(
    saleId: BigNumberish,
    recipient: string,
    amountToBuy: BigNumberish,
    amountFromBalance: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "buy(uint256,address,uint256,uint256)"(
    saleId: BigNumberish,
    recipient: string,
    amountToBuy: BigNumberish,
    amountFromBalance: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  cancelAuction(
    auctionId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "cancelAuction(uint256)"(
    auctionId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  cancelSale(
    saleId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "cancelSale(uint256)"(
    saleId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  cancelledAuction(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "cancelledAuction(uint256)"(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  cancelledSale(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "cancelledSale(uint256)"(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  claimFunds(
    tokenAddress: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "claimFunds(address)"(
    tokenAddress: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  claimSaleNfts(
    saleId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "claimSaleNfts(uint256)"(
    saleId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  claimableFunds(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "claimableFunds(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  claimed(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "claimed(uint256)"(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  createAuction(
    isERC721: boolean,
    nftAddress: string,
    nftId: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish,
    reservePrice: BigNumberish,
    currency: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "createAuction(bool,address,uint128,uint256,uint256,uint256,address)"(
    isERC721: boolean,
    nftAddress: string,
    nftId: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish,
    reservePrice: BigNumberish,
    currency: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  createSale(
    isERC721: boolean,
    nftAddress: string,
    nftId: BigNumberish,
    amount: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish,
    price: BigNumberish,
    currency: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "createSale(bool,address,uint128,uint256,uint256,uint256,uint256,address)"(
    isERC721: boolean,
    nftAddress: string,
    nftId: BigNumberish,
    amount: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish,
    price: BigNumberish,
    currency: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  escrow(arg0: string, overrides?: UnsignedTransaction): Promise<BigNumber>;

  "escrow(address)"(
    arg0: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  getAuctionStatus(
    auctionId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "getAuctionStatus(uint256)"(
    auctionId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  getAuctions(
    pageNo: BigNumberish,
    pageSize: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    ([
      BigNumber,
      BigNumber,
      boolean,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      nftId: BigNumber;
      isERC721: boolean;
      nftAddress: string;
      owner: string;
      currency: string;
      startTime: BigNumber;
      endTime: BigNumber;
      reservePrice: BigNumber;
    })[]
  >;

  "getAuctions(uint256,uint256)"(
    pageNo: BigNumberish,
    pageSize: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    ([
      BigNumber,
      BigNumber,
      boolean,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      nftId: BigNumber;
      isERC721: boolean;
      nftAddress: string;
      owner: string;
      currency: string;
      startTime: BigNumber;
      endTime: BigNumber;
      reservePrice: BigNumber;
    })[]
  >;

  getSaleStatus(
    saleId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "getSaleStatus(uint256)"(
    saleId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  getSales(
    pageNo: BigNumberish,
    pageSize: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    ([
      BigNumber,
      boolean,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      nftId: BigNumber;
      isERC721: boolean;
      nftAddress: string;
      owner: string;
      currency: string;
      amount: BigNumber;
      purchased: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      price: BigNumber;
    })[]
  >;

  "getSales(uint256,uint256)"(
    pageNo: BigNumberish,
    pageSize: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    ([
      BigNumber,
      boolean,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      nftId: BigNumber;
      isERC721: boolean;
      nftAddress: string;
      owner: string;
      currency: string;
      amount: BigNumber;
      purchased: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      price: BigNumber;
    })[]
  >;

  highestBidder(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "highestBidder(uint256)"(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "onERC1155Received(address,address,uint256,uint256,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "onERC721Received(address,address,uint256,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  owner(overrides?: UnsignedTransaction): Promise<string>;

  "owner()"(overrides?: UnsignedTransaction): Promise<string>;

  purchased(
    arg0: BigNumberish,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "purchased(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  resolveAuction(
    auctionId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "resolveAuction(uint256)"(
    auctionId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  saleIdCounter(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "saleIdCounter()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  sales(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    [
      BigNumber,
      boolean,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      nftId: BigNumber;
      isERC721: boolean;
      nftAddress: string;
      owner: string;
      currency: string;
      amount: BigNumber;
      purchased: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      price: BigNumber;
    }
  >;

  "sales(uint256)"(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    [
      BigNumber,
      boolean,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      nftId: BigNumber;
      isERC721: boolean;
      nftAddress: string;
      owner: string;
      currency: string;
      amount: BigNumber;
      purchased: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      price: BigNumber;
    }
  >;

  supportsInterface(
    interfaceId: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  filters: {
    AuctionCancelled(auctionId: BigNumberish | null): EventFilter;

    BalanceUpdated(
      accountOf: string | null,
      tokenAddress: string | null,
      newBalance: BigNumberish | null
    ): EventFilter;

    BidPlaced(auctionId: BigNumberish | null, totalAmount: null): EventFilter;

    ClaimAuctionNFT(
      auctionId: BigNumberish | null,
      claimer: string | null,
      recipient: string | null,
      amount: null
    ): EventFilter;

    ClaimFunds(
      accountOf: string | null,
      tokenAddress: string | null,
      newBalance: BigNumberish | null
    ): EventFilter;

    ClaimSaleNFTs(
      id: BigNumberish | null,
      owner: string | null,
      amount: BigNumberish | null
    ): EventFilter;

    NewAuction(auctionId: BigNumberish | null, newAuction: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Purchase(
      saleId: BigNumberish | null,
      purchaser: string | null,
      recipient: string | null
    ): EventFilter;

    SaleCancelled(saleId: BigNumberish | null): EventFilter;

    SaleCreated(
      id: BigNumberish | null,
      nftAddress: string | null,
      nftID: BigNumberish | null
    ): EventFilter;
  };

  estimate: {
    auctionIdCounter(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "auctionIdCounter()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    auctions(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "auctions(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    bid(
      auctionId: BigNumberish,
      amountFromBalance: BigNumberish,
      externalFunds: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "bid(uint256,uint256,uint256)"(
      auctionId: BigNumberish,
      amountFromBalance: BigNumberish,
      externalFunds: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    bids(
      arg0: BigNumberish,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "bids(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    buy(
      saleId: BigNumberish,
      recipient: string,
      amountToBuy: BigNumberish,
      amountFromBalance: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "buy(uint256,address,uint256,uint256)"(
      saleId: BigNumberish,
      recipient: string,
      amountToBuy: BigNumberish,
      amountFromBalance: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    cancelAuction(
      auctionId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "cancelAuction(uint256)"(
      auctionId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    cancelSale(
      saleId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "cancelSale(uint256)"(
      saleId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    cancelledAuction(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "cancelledAuction(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    cancelledSale(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "cancelledSale(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    claimFunds(
      tokenAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "claimFunds(address)"(
      tokenAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    claimSaleNfts(
      saleId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "claimSaleNfts(uint256)"(
      saleId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    claimableFunds(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "claimableFunds(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    claimed(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "claimed(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    createAuction(
      isERC721: boolean,
      nftAddress: string,
      nftId: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      reservePrice: BigNumberish,
      currency: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "createAuction(bool,address,uint128,uint256,uint256,uint256,address)"(
      isERC721: boolean,
      nftAddress: string,
      nftId: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      reservePrice: BigNumberish,
      currency: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    createSale(
      isERC721: boolean,
      nftAddress: string,
      nftId: BigNumberish,
      amount: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      price: BigNumberish,
      currency: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "createSale(bool,address,uint128,uint256,uint256,uint256,uint256,address)"(
      isERC721: boolean,
      nftAddress: string,
      nftId: BigNumberish,
      amount: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      price: BigNumberish,
      currency: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    escrow(arg0: string, overrides?: UnsignedTransaction): Promise<BigNumber>;

    "escrow(address)"(
      arg0: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getAuctionStatus(
      auctionId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getAuctionStatus(uint256)"(
      auctionId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getAuctions(
      pageNo: BigNumberish,
      pageSize: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getAuctions(uint256,uint256)"(
      pageNo: BigNumberish,
      pageSize: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getSaleStatus(
      saleId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getSaleStatus(uint256)"(
      saleId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getSales(
      pageNo: BigNumberish,
      pageSize: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getSales(uint256,uint256)"(
      pageNo: BigNumberish,
      pageSize: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    highestBidder(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "highestBidder(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    owner(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "owner()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    purchased(
      arg0: BigNumberish,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "purchased(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    resolveAuction(
      auctionId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "resolveAuction(uint256)"(
      auctionId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    saleIdCounter(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "saleIdCounter()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    sales(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "sales(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;
  };
}
