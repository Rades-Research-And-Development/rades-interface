/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface RadesMockCurrencyInterface extends Interface {
  functions: {
    DOMAIN_SEPARATOR: TypedFunctionDescription<{ encode([]: []): string }>;

    allowance: TypedFunctionDescription<{
      encode([owner, spender]: [string, string]): string;
    }>;

    approve: TypedFunctionDescription<{
      encode([spender, amount]: [string, BigNumberish]): string;
    }>;

    balanceOf: TypedFunctionDescription<{
      encode([account]: [string]): string;
    }>;

    balanceOfAt: TypedFunctionDescription<{
      encode([account, snapshotId]: [string, BigNumberish]): string;
    }>;

    burn: TypedFunctionDescription<{
      encode([amount]: [BigNumberish]): string;
    }>;

    burnFrom: TypedFunctionDescription<{
      encode([account, amount]: [string, BigNumberish]): string;
    }>;

    checkpoints: TypedFunctionDescription<{
      encode([account, pos]: [string, BigNumberish]): string;
    }>;

    decimals: TypedFunctionDescription<{ encode([]: []): string }>;

    decreaseAllowance: TypedFunctionDescription<{
      encode([spender, subtractedValue]: [string, BigNumberish]): string;
    }>;

    delegate: TypedFunctionDescription<{
      encode([delegatee]: [string]): string;
    }>;

    delegateBySig: TypedFunctionDescription<{
      encode([delegatee, nonce, expiry, v, r, s]: [
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        Arrayish,
        Arrayish
      ]): string;
    }>;

    delegates: TypedFunctionDescription<{
      encode([account]: [string]): string;
    }>;

    flashFee: TypedFunctionDescription<{
      encode([token, amount]: [string, BigNumberish]): string;
    }>;

    flashLoan: TypedFunctionDescription<{
      encode([receiver, token, amount, data]: [
        string,
        string,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    getPastTotalSupply: TypedFunctionDescription<{
      encode([blockNumber]: [BigNumberish]): string;
    }>;

    getPastVotes: TypedFunctionDescription<{
      encode([account, blockNumber]: [string, BigNumberish]): string;
    }>;

    getVotes: TypedFunctionDescription<{ encode([account]: [string]): string }>;

    increaseAllowance: TypedFunctionDescription<{
      encode([spender, addedValue]: [string, BigNumberish]): string;
    }>;

    maxFlashLoan: TypedFunctionDescription<{
      encode([token]: [string]): string;
    }>;

    mint: TypedFunctionDescription<{
      encode([to, amount]: [string, BigNumberish]): string;
    }>;

    name: TypedFunctionDescription<{ encode([]: []): string }>;

    nonces: TypedFunctionDescription<{ encode([owner]: [string]): string }>;

    numCheckpoints: TypedFunctionDescription<{
      encode([account]: [string]): string;
    }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    pause: TypedFunctionDescription<{ encode([]: []): string }>;

    paused: TypedFunctionDescription<{ encode([]: []): string }>;

    permit: TypedFunctionDescription<{
      encode([owner, spender, value, deadline, v, r, s]: [
        string,
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        Arrayish,
        Arrayish
      ]): string;
    }>;

    renounceOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    snapshot: TypedFunctionDescription<{ encode([]: []): string }>;

    symbol: TypedFunctionDescription<{ encode([]: []): string }>;

    totalSupply: TypedFunctionDescription<{ encode([]: []): string }>;

    totalSupplyAt: TypedFunctionDescription<{
      encode([snapshotId]: [BigNumberish]): string;
    }>;

    transfer: TypedFunctionDescription<{
      encode([to, amount]: [string, BigNumberish]): string;
    }>;

    transferFrom: TypedFunctionDescription<{
      encode([from, to, amount]: [string, string, BigNumberish]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([newOwner]: [string]): string;
    }>;

    unpause: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    Approval: TypedEventDescription<{
      encodeTopics([owner, spender, value]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    DelegateChanged: TypedEventDescription<{
      encodeTopics([delegator, fromDelegate, toDelegate]: [
        string | null,
        string | null,
        string | null
      ]): string[];
    }>;

    DelegateVotesChanged: TypedEventDescription<{
      encodeTopics([delegate, previousBalance, newBalance]: [
        string | null,
        null,
        null
      ]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;

    Paused: TypedEventDescription<{
      encodeTopics([account]: [null]): string[];
    }>;

    Snapshot: TypedEventDescription<{ encodeTopics([id]: [null]): string[] }>;

    Transfer: TypedEventDescription<{
      encodeTopics([from, to, value]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    Unpaused: TypedEventDescription<{
      encodeTopics([account]: [null]): string[];
    }>;
  };
}

export class RadesMockCurrency extends Contract {
  connect(signerOrProvider: Signer | Provider | string): RadesMockCurrency;
  attach(addressOrName: string): RadesMockCurrency;
  deployed(): Promise<RadesMockCurrency>;

  on(event: EventFilter | string, listener: Listener): RadesMockCurrency;
  once(event: EventFilter | string, listener: Listener): RadesMockCurrency;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): RadesMockCurrency;
  removeAllListeners(eventName: EventFilter | string): RadesMockCurrency;
  removeListener(eventName: any, listener: Listener): RadesMockCurrency;

  interface: RadesMockCurrencyInterface;

  functions: {
    DOMAIN_SEPARATOR(overrides?: UnsignedTransaction): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: UnsignedTransaction): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    balanceOfAt(
      account: string,
      snapshotId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "balanceOfAt(address,uint256)"(
      account: string,
      snapshotId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    burn(
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "burn(uint256)"(
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "burnFrom(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    checkpoints(
      account: string,
      pos: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<[number, BigNumber] & { fromBlock: number; votes: BigNumber }>;

    "checkpoints(address,uint32)"(
      account: string,
      pos: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<[number, BigNumber] & { fromBlock: number; votes: BigNumber }>;

    decimals(overrides?: UnsignedTransaction): Promise<number>;

    "decimals()"(overrides?: UnsignedTransaction): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    delegate(
      delegatee: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "delegate(address)"(
      delegatee: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    delegates(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "delegates(address)"(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    flashFee(
      token: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "flashFee(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    flashLoan(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "flashLoan(address,address,uint256,bytes)"(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    getPastTotalSupply(
      blockNumber: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getPastTotalSupply(uint256)"(
      blockNumber: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getPastVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getPastVotes(address,uint256)"(
      account: string,
      blockNumber: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getVotes(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getVotes(address)"(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    maxFlashLoan(
      token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "maxFlashLoan(address)"(
      token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "mint(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    name(overrides?: UnsignedTransaction): Promise<string>;

    "name()"(overrides?: UnsignedTransaction): Promise<string>;

    nonces(owner: string, overrides?: UnsignedTransaction): Promise<BigNumber>;

    "nonces(address)"(
      owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    numCheckpoints(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<number>;

    "numCheckpoints(address)"(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<number>;

    owner(overrides?: UnsignedTransaction): Promise<string>;

    "owner()"(overrides?: UnsignedTransaction): Promise<string>;

    pause(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    "pause()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    paused(overrides?: UnsignedTransaction): Promise<boolean>;

    "paused()"(overrides?: UnsignedTransaction): Promise<boolean>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    snapshot(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    "snapshot()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    symbol(overrides?: UnsignedTransaction): Promise<string>;

    "symbol()"(overrides?: UnsignedTransaction): Promise<string>;

    totalSupply(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "totalSupply()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    totalSupplyAt(
      snapshotId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "totalSupplyAt(uint256)"(
      snapshotId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    unpause(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    "unpause()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: UnsignedTransaction): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: UnsignedTransaction): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  balanceOf(
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  balanceOfAt(
    account: string,
    snapshotId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "balanceOfAt(address,uint256)"(
    account: string,
    snapshotId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  burn(
    amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "burn(uint256)"(
    amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  burnFrom(
    account: string,
    amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "burnFrom(address,uint256)"(
    account: string,
    amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  checkpoints(
    account: string,
    pos: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<[number, BigNumber] & { fromBlock: number; votes: BigNumber }>;

  "checkpoints(address,uint32)"(
    account: string,
    pos: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<[number, BigNumber] & { fromBlock: number; votes: BigNumber }>;

  decimals(overrides?: UnsignedTransaction): Promise<number>;

  "decimals()"(overrides?: UnsignedTransaction): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  delegate(
    delegatee: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "delegate(address)"(
    delegatee: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  delegateBySig(
    delegatee: string,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: Arrayish,
    s: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
    delegatee: string,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: Arrayish,
    s: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  delegates(account: string, overrides?: UnsignedTransaction): Promise<string>;

  "delegates(address)"(
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  flashFee(
    token: string,
    amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "flashFee(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  flashLoan(
    receiver: string,
    token: string,
    amount: BigNumberish,
    data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "flashLoan(address,address,uint256,bytes)"(
    receiver: string,
    token: string,
    amount: BigNumberish,
    data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  getPastTotalSupply(
    blockNumber: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "getPastTotalSupply(uint256)"(
    blockNumber: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  getPastVotes(
    account: string,
    blockNumber: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "getPastVotes(address,uint256)"(
    account: string,
    blockNumber: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  getVotes(
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "getVotes(address)"(
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  maxFlashLoan(
    token: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "maxFlashLoan(address)"(
    token: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  mint(
    to: string,
    amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "mint(address,uint256)"(
    to: string,
    amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  name(overrides?: UnsignedTransaction): Promise<string>;

  "name()"(overrides?: UnsignedTransaction): Promise<string>;

  nonces(owner: string, overrides?: UnsignedTransaction): Promise<BigNumber>;

  "nonces(address)"(
    owner: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  numCheckpoints(
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<number>;

  "numCheckpoints(address)"(
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<number>;

  owner(overrides?: UnsignedTransaction): Promise<string>;

  "owner()"(overrides?: UnsignedTransaction): Promise<string>;

  pause(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "pause()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  paused(overrides?: UnsignedTransaction): Promise<boolean>;

  "paused()"(overrides?: UnsignedTransaction): Promise<boolean>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: Arrayish,
    s: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: Arrayish,
    s: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  snapshot(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "snapshot()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  symbol(overrides?: UnsignedTransaction): Promise<string>;

  "symbol()"(overrides?: UnsignedTransaction): Promise<string>;

  totalSupply(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "totalSupply()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  totalSupplyAt(
    snapshotId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "totalSupplyAt(uint256)"(
    snapshotId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    to: string,
    amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  unpause(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "unpause()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    DelegateChanged(
      delegator: string | null,
      fromDelegate: string | null,
      toDelegate: string | null
    ): EventFilter;

    DelegateVotesChanged(
      delegate: string | null,
      previousBalance: null,
      newBalance: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Paused(account: null): EventFilter;

    Snapshot(id: null): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimate: {
    DOMAIN_SEPARATOR(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    balanceOf(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    balanceOfAt(
      account: string,
      snapshotId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "balanceOfAt(address,uint256)"(
      account: string,
      snapshotId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    burn(
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "burn(uint256)"(
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "burnFrom(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    checkpoints(
      account: string,
      pos: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "checkpoints(address,uint32)"(
      account: string,
      pos: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    decimals(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "decimals()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    delegate(
      delegatee: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "delegate(address)"(
      delegatee: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    delegates(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "delegates(address)"(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    flashFee(
      token: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "flashFee(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    flashLoan(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "flashLoan(address,address,uint256,bytes)"(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getPastTotalSupply(
      blockNumber: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getPastTotalSupply(uint256)"(
      blockNumber: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getPastVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getPastVotes(address,uint256)"(
      account: string,
      blockNumber: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getVotes(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getVotes(address)"(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    maxFlashLoan(
      token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "maxFlashLoan(address)"(
      token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "mint(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    name(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "name()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    nonces(owner: string, overrides?: UnsignedTransaction): Promise<BigNumber>;

    "nonces(address)"(
      owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    numCheckpoints(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "numCheckpoints(address)"(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    owner(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "owner()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    pause(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "pause()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    paused(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "paused()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    snapshot(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "snapshot()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    symbol(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "symbol()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    totalSupply(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "totalSupply()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    totalSupplyAt(
      snapshotId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "totalSupplyAt(uint256)"(
      snapshotId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    unpause(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "unpause()"(overrides?: UnsignedTransaction): Promise<BigNumber>;
  };
}
