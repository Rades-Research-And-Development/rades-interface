/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface RegistryInterface extends Interface {
  functions: {
    approveAllCurrencies: TypedFunctionDescription<{ encode([]: []): string }>;

    approvedCurrencies: TypedFunctionDescription<{
      encode([]: [string]): string;
    }>;

    feeInfo: TypedFunctionDescription<{
      encode([salePrice]: [BigNumberish]): string;
    }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    platformContracts: TypedFunctionDescription<{
      encode([]: [string]): string;
    }>;

    renounceOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    setContractStatus: TypedFunctionDescription<{
      encode([nftContract, status]: [string, boolean]): string;
    }>;

    setCurrencyStatus: TypedFunctionDescription<{
      encode([tokenContract, status]: [string, boolean]): string;
    }>;

    setFee: TypedFunctionDescription<{
      encode([newFee]: [BigNumberish]): string;
    }>;

    setScale: TypedFunctionDescription<{
      encode([newScale]: [BigNumberish]): string;
    }>;

    setSystemWallet: TypedFunctionDescription<{
      encode([newWallet]: [string]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([newOwner]: [string]): string;
    }>;
  };

  events: {
    ContractStatusChanged: TypedEventDescription<{
      encodeTopics([changed, status]: [
        string | null,
        boolean | null
      ]): string[];
    }>;

    CurrencyStatusChanged: TypedEventDescription<{
      encodeTopics([changed, status]: [
        string | null,
        boolean | null
      ]): string[];
    }>;

    FeeChanged: TypedEventDescription<{
      encodeTopics([newFee]: [null]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;

    ScaleChanged: TypedEventDescription<{
      encodeTopics([newScale]: [null]): string[];
    }>;

    SystemWalletUpdated: TypedEventDescription<{
      encodeTopics([newWallet]: [string | null]): string[];
    }>;
  };
}

export class Registry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Registry;
  attach(addressOrName: string): Registry;
  deployed(): Promise<Registry>;

  on(event: EventFilter | string, listener: Listener): Registry;
  once(event: EventFilter | string, listener: Listener): Registry;
  addListener(eventName: EventFilter | string, listener: Listener): Registry;
  removeAllListeners(eventName: EventFilter | string): Registry;
  removeListener(eventName: any, listener: Listener): Registry;

  interface: RegistryInterface;

  functions: {
    approveAllCurrencies(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "approveAllCurrencies()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    approvedCurrencies(
      arg0: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "approvedCurrencies(address)"(
      arg0: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    feeInfo(
      salePrice: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<[string, BigNumber]>;

    "feeInfo(uint256)"(
      salePrice: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<[string, BigNumber]>;

    owner(overrides?: UnsignedTransaction): Promise<string>;

    "owner()"(overrides?: UnsignedTransaction): Promise<string>;

    platformContracts(
      arg0: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "platformContracts(address)"(
      arg0: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    renounceOwnership(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setContractStatus(
      nftContract: string,
      status: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setContractStatus(address,bool)"(
      nftContract: string,
      status: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setCurrencyStatus(
      tokenContract: string,
      status: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setCurrencyStatus(address,bool)"(
      tokenContract: string,
      status: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setFee(
      newFee: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setFee(uint64)"(
      newFee: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setScale(
      newScale: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setScale(uint64)"(
      newScale: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setSystemWallet(
      newWallet: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setSystemWallet(address)"(
      newWallet: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;
  };

  approveAllCurrencies(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "approveAllCurrencies()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  approvedCurrencies(
    arg0: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "approvedCurrencies(address)"(
    arg0: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  feeInfo(
    salePrice: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<[string, BigNumber]>;

  "feeInfo(uint256)"(
    salePrice: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<[string, BigNumber]>;

  owner(overrides?: UnsignedTransaction): Promise<string>;

  "owner()"(overrides?: UnsignedTransaction): Promise<string>;

  platformContracts(
    arg0: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "platformContracts(address)"(
    arg0: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  renounceOwnership(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setContractStatus(
    nftContract: string,
    status: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setContractStatus(address,bool)"(
    nftContract: string,
    status: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setCurrencyStatus(
    tokenContract: string,
    status: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setCurrencyStatus(address,bool)"(
    tokenContract: string,
    status: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setFee(
    newFee: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setFee(uint64)"(
    newFee: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setScale(
    newScale: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setScale(uint64)"(
    newScale: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setSystemWallet(
    newWallet: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setSystemWallet(address)"(
    newWallet: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  filters: {
    ContractStatusChanged(
      changed: string | null,
      status: boolean | null
    ): EventFilter;

    CurrencyStatusChanged(
      changed: string | null,
      status: boolean | null
    ): EventFilter;

    FeeChanged(newFee: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    ScaleChanged(newScale: null): EventFilter;

    SystemWalletUpdated(newWallet: string | null): EventFilter;
  };

  estimate: {
    approveAllCurrencies(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "approveAllCurrencies()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    approvedCurrencies(
      arg0: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "approvedCurrencies(address)"(
      arg0: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    feeInfo(
      salePrice: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "feeInfo(uint256)"(
      salePrice: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    owner(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "owner()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    platformContracts(
      arg0: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "platformContracts(address)"(
      arg0: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    setContractStatus(
      nftContract: string,
      status: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setContractStatus(address,bool)"(
      nftContract: string,
      status: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setCurrencyStatus(
      tokenContract: string,
      status: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setCurrencyStatus(address,bool)"(
      tokenContract: string,
      status: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setFee(
      newFee: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setFee(uint64)"(
      newFee: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setScale(
      newScale: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setScale(uint64)"(
      newScale: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setSystemWallet(
      newWallet: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setSystemWallet(address)"(
      newWallet: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;
  };
}
