/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Marketplace {
  export type AuctionInfoStruct = {
    id: PromiseOrValue<BigNumberish>;
    nftId: PromiseOrValue<BigNumberish>;
    isERC721: PromiseOrValue<boolean>;
    nftAddress: PromiseOrValue<string>;
    owner: PromiseOrValue<string>;
    currency: PromiseOrValue<string>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    reservePrice: PromiseOrValue<BigNumberish>;
  };

  export type AuctionInfoStructOutput = [
    BigNumber,
    BigNumber,
    boolean,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    id: BigNumber;
    nftId: BigNumber;
    isERC721: boolean;
    nftAddress: string;
    owner: string;
    currency: string;
    startTime: BigNumber;
    endTime: BigNumber;
    reservePrice: BigNumber;
  };

  export type SaleInfoStruct = {
    nftId: PromiseOrValue<BigNumberish>;
    isERC721: PromiseOrValue<boolean>;
    nftAddress: PromiseOrValue<string>;
    owner: PromiseOrValue<string>;
    currency: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    purchased: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
  };

  export type SaleInfoStructOutput = [
    BigNumber,
    boolean,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    nftId: BigNumber;
    isERC721: boolean;
    nftAddress: string;
    owner: string;
    currency: string;
    amount: BigNumber;
    purchased: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    price: BigNumber;
  };
}

export interface MarketplaceInterface extends utils.Interface {
  functions: {
    "auctionIdCounter()": FunctionFragment;
    "auctions(uint256)": FunctionFragment;
    "bid(uint256,uint256,uint256)": FunctionFragment;
    "bids(uint256,address)": FunctionFragment;
    "buy(uint256,address,uint256,uint256)": FunctionFragment;
    "cancelAuction(uint256)": FunctionFragment;
    "cancelSale(uint256)": FunctionFragment;
    "cancelledAuction(uint256)": FunctionFragment;
    "cancelledSale(uint256)": FunctionFragment;
    "claimFunds(address)": FunctionFragment;
    "claimSaleNfts(uint256)": FunctionFragment;
    "claimableFunds(address,address)": FunctionFragment;
    "claimed(uint256)": FunctionFragment;
    "createAuction(bool,address,uint128,uint256,uint256,uint256,address)": FunctionFragment;
    "createSale(bool,address,uint128,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "escrow(address)": FunctionFragment;
    "getAuctionStatus(uint256)": FunctionFragment;
    "getAuctions(uint256,uint256)": FunctionFragment;
    "getSaleStatus(uint256)": FunctionFragment;
    "getSales(uint256,uint256)": FunctionFragment;
    "highestBidder(uint256)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "purchased(uint256,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resolveAuction(uint256)": FunctionFragment;
    "saleIdCounter()": FunctionFragment;
    "sales(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "auctionIdCounter"
      | "auctions"
      | "bid"
      | "bids"
      | "buy"
      | "cancelAuction"
      | "cancelSale"
      | "cancelledAuction"
      | "cancelledSale"
      | "claimFunds"
      | "claimSaleNfts"
      | "claimableFunds"
      | "claimed"
      | "createAuction"
      | "createSale"
      | "escrow"
      | "getAuctionStatus"
      | "getAuctions"
      | "getSaleStatus"
      | "getSales"
      | "highestBidder"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "owner"
      | "purchased"
      | "renounceOwnership"
      | "resolveAuction"
      | "saleIdCounter"
      | "sales"
      | "supportsInterface"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "auctionIdCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bid",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bids",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSale",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelledAuction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelledSale",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFunds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSaleNfts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableFunds",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createSale",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "escrow",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctions",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSales",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "highestBidder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchased",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveAuction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "saleIdCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sales",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "auctionIdCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bids", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelledAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelledSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimSaleNfts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createSale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "escrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSaleStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSales", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "highestBidder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "purchased", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saleIdCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sales", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AuctionCancelled(uint256)": EventFragment;
    "BalanceUpdated(address,address,uint256)": EventFragment;
    "BidPlaced(uint256,uint256)": EventFragment;
    "ClaimAuctionNFT(uint256,address,address,uint256)": EventFragment;
    "ClaimFunds(address,address,uint256)": EventFragment;
    "ClaimSaleNFTs(uint256,address,uint256)": EventFragment;
    "NewAuction(uint256,tuple)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Purchase(uint256,address,address)": EventFragment;
    "SaleCancelled(uint256)": EventFragment;
    "SaleCreated(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BalanceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimAuctionNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimFunds"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimSaleNFTs"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Purchase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleCreated"): EventFragment;
}

export interface AuctionCancelledEventObject {
  auctionId: BigNumber;
}
export type AuctionCancelledEvent = TypedEvent<
  [BigNumber],
  AuctionCancelledEventObject
>;

export type AuctionCancelledEventFilter =
  TypedEventFilter<AuctionCancelledEvent>;

export interface BalanceUpdatedEventObject {
  accountOf: string;
  tokenAddress: string;
  newBalance: BigNumber;
}
export type BalanceUpdatedEvent = TypedEvent<
  [string, string, BigNumber],
  BalanceUpdatedEventObject
>;

export type BalanceUpdatedEventFilter = TypedEventFilter<BalanceUpdatedEvent>;

export interface BidPlacedEventObject {
  auctionId: BigNumber;
  totalAmount: BigNumber;
}
export type BidPlacedEvent = TypedEvent<
  [BigNumber, BigNumber],
  BidPlacedEventObject
>;

export type BidPlacedEventFilter = TypedEventFilter<BidPlacedEvent>;

export interface ClaimAuctionNFTEventObject {
  auctionId: BigNumber;
  claimer: string;
  recipient: string;
  amount: BigNumber;
}
export type ClaimAuctionNFTEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  ClaimAuctionNFTEventObject
>;

export type ClaimAuctionNFTEventFilter = TypedEventFilter<ClaimAuctionNFTEvent>;

export interface ClaimFundsEventObject {
  accountOf: string;
  tokenAddress: string;
  newBalance: BigNumber;
}
export type ClaimFundsEvent = TypedEvent<
  [string, string, BigNumber],
  ClaimFundsEventObject
>;

export type ClaimFundsEventFilter = TypedEventFilter<ClaimFundsEvent>;

export interface ClaimSaleNFTsEventObject {
  id: BigNumber;
  owner: string;
  amount: BigNumber;
}
export type ClaimSaleNFTsEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  ClaimSaleNFTsEventObject
>;

export type ClaimSaleNFTsEventFilter = TypedEventFilter<ClaimSaleNFTsEvent>;

export interface NewAuctionEventObject {
  auctionId: BigNumber;
  newAuction: Marketplace.AuctionInfoStructOutput;
}
export type NewAuctionEvent = TypedEvent<
  [BigNumber, Marketplace.AuctionInfoStructOutput],
  NewAuctionEventObject
>;

export type NewAuctionEventFilter = TypedEventFilter<NewAuctionEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PurchaseEventObject {
  saleId: BigNumber;
  purchaser: string;
  recipient: string;
}
export type PurchaseEvent = TypedEvent<
  [BigNumber, string, string],
  PurchaseEventObject
>;

export type PurchaseEventFilter = TypedEventFilter<PurchaseEvent>;

export interface SaleCancelledEventObject {
  saleId: BigNumber;
}
export type SaleCancelledEvent = TypedEvent<
  [BigNumber],
  SaleCancelledEventObject
>;

export type SaleCancelledEventFilter = TypedEventFilter<SaleCancelledEvent>;

export interface SaleCreatedEventObject {
  id: BigNumber;
  nftAddress: string;
  nftID: BigNumber;
}
export type SaleCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  SaleCreatedEventObject
>;

export type SaleCreatedEventFilter = TypedEventFilter<SaleCreatedEvent>;

export interface Marketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    auctionIdCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        boolean,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        nftId: BigNumber;
        isERC721: boolean;
        nftAddress: string;
        owner: string;
        currency: string;
        startTime: BigNumber;
        endTime: BigNumber;
        reservePrice: BigNumber;
      }
    >;

    bid(
      auctionId: PromiseOrValue<BigNumberish>,
      amountFromBalance: PromiseOrValue<BigNumberish>,
      externalFunds: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bids(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; timestamp: BigNumber }
    >;

    buy(
      saleId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      amountToBuy: PromiseOrValue<BigNumberish>,
      amountFromBalance: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelAuction(
      auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelSale(
      saleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelledAuction(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cancelledSale(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claimFunds(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimSaleNfts(
      saleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimableFunds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimed(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    createAuction(
      isERC721: PromiseOrValue<boolean>,
      nftAddress: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      reservePrice: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createSale(
      isERC721: PromiseOrValue<boolean>,
      nftAddress: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    escrow(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAuctionStatus(
      auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAuctions(
      pageNo: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Marketplace.AuctionInfoStructOutput[]]>;

    getSaleStatus(
      saleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSales(
      pageNo: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Marketplace.SaleInfoStructOutput[]]>;

    highestBidder(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    purchased(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolveAuction(
      auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    saleIdCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    sales(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        boolean,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        nftId: BigNumber;
        isERC721: boolean;
        nftAddress: string;
        owner: string;
        currency: string;
        amount: BigNumber;
        purchased: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        price: BigNumber;
      }
    >;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  auctionIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

  auctions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      boolean,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      nftId: BigNumber;
      isERC721: boolean;
      nftAddress: string;
      owner: string;
      currency: string;
      startTime: BigNumber;
      endTime: BigNumber;
      reservePrice: BigNumber;
    }
  >;

  bid(
    auctionId: PromiseOrValue<BigNumberish>,
    amountFromBalance: PromiseOrValue<BigNumberish>,
    externalFunds: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bids(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; timestamp: BigNumber }
  >;

  buy(
    saleId: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    amountToBuy: PromiseOrValue<BigNumberish>,
    amountFromBalance: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelAuction(
    auctionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelSale(
    saleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelledAuction(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  cancelledSale(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claimFunds(
    tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimSaleNfts(
    saleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimableFunds(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimed(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  createAuction(
    isERC721: PromiseOrValue<boolean>,
    nftAddress: PromiseOrValue<string>,
    nftId: PromiseOrValue<BigNumberish>,
    startTime: PromiseOrValue<BigNumberish>,
    endTime: PromiseOrValue<BigNumberish>,
    reservePrice: PromiseOrValue<BigNumberish>,
    currency: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createSale(
    isERC721: PromiseOrValue<boolean>,
    nftAddress: PromiseOrValue<string>,
    nftId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    startTime: PromiseOrValue<BigNumberish>,
    endTime: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    currency: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  escrow(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAuctionStatus(
    auctionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAuctions(
    pageNo: PromiseOrValue<BigNumberish>,
    pageSize: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Marketplace.AuctionInfoStructOutput[]>;

  getSaleStatus(
    saleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSales(
    pageNo: PromiseOrValue<BigNumberish>,
    pageSize: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Marketplace.SaleInfoStructOutput[]>;

  highestBidder(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  onERC1155BatchReceived(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>[],
    arg3: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  purchased(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolveAuction(
    auctionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  saleIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

  sales(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      boolean,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      nftId: BigNumber;
      isERC721: boolean;
      nftAddress: string;
      owner: string;
      currency: string;
      amount: BigNumber;
      purchased: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      price: BigNumber;
    }
  >;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    auctionIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        boolean,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        nftId: BigNumber;
        isERC721: boolean;
        nftAddress: string;
        owner: string;
        currency: string;
        startTime: BigNumber;
        endTime: BigNumber;
        reservePrice: BigNumber;
      }
    >;

    bid(
      auctionId: PromiseOrValue<BigNumberish>,
      amountFromBalance: PromiseOrValue<BigNumberish>,
      externalFunds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    bids(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; timestamp: BigNumber }
    >;

    buy(
      saleId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      amountToBuy: PromiseOrValue<BigNumberish>,
      amountFromBalance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancelAuction(
      auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelSale(
      saleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelledAuction(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancelledSale(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimFunds(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimSaleNfts(
      saleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimableFunds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimed(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createAuction(
      isERC721: PromiseOrValue<boolean>,
      nftAddress: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      reservePrice: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createSale(
      isERC721: PromiseOrValue<boolean>,
      nftAddress: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    escrow(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionStatus(
      auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAuctions(
      pageNo: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Marketplace.AuctionInfoStructOutput[]>;

    getSaleStatus(
      saleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSales(
      pageNo: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Marketplace.SaleInfoStructOutput[]>;

    highestBidder(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    purchased(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resolveAuction(
      auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    saleIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    sales(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        boolean,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        nftId: BigNumber;
        isERC721: boolean;
        nftAddress: string;
        owner: string;
        currency: string;
        amount: BigNumber;
        purchased: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        price: BigNumber;
      }
    >;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AuctionCancelled(uint256)"(
      auctionId?: PromiseOrValue<BigNumberish> | null
    ): AuctionCancelledEventFilter;
    AuctionCancelled(
      auctionId?: PromiseOrValue<BigNumberish> | null
    ): AuctionCancelledEventFilter;

    "BalanceUpdated(address,address,uint256)"(
      accountOf?: PromiseOrValue<string> | null,
      tokenAddress?: PromiseOrValue<string> | null,
      newBalance?: PromiseOrValue<BigNumberish> | null
    ): BalanceUpdatedEventFilter;
    BalanceUpdated(
      accountOf?: PromiseOrValue<string> | null,
      tokenAddress?: PromiseOrValue<string> | null,
      newBalance?: PromiseOrValue<BigNumberish> | null
    ): BalanceUpdatedEventFilter;

    "BidPlaced(uint256,uint256)"(
      auctionId?: PromiseOrValue<BigNumberish> | null,
      totalAmount?: null
    ): BidPlacedEventFilter;
    BidPlaced(
      auctionId?: PromiseOrValue<BigNumberish> | null,
      totalAmount?: null
    ): BidPlacedEventFilter;

    "ClaimAuctionNFT(uint256,address,address,uint256)"(
      auctionId?: PromiseOrValue<BigNumberish> | null,
      claimer?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null
    ): ClaimAuctionNFTEventFilter;
    ClaimAuctionNFT(
      auctionId?: PromiseOrValue<BigNumberish> | null,
      claimer?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null
    ): ClaimAuctionNFTEventFilter;

    "ClaimFunds(address,address,uint256)"(
      accountOf?: PromiseOrValue<string> | null,
      tokenAddress?: PromiseOrValue<string> | null,
      newBalance?: PromiseOrValue<BigNumberish> | null
    ): ClaimFundsEventFilter;
    ClaimFunds(
      accountOf?: PromiseOrValue<string> | null,
      tokenAddress?: PromiseOrValue<string> | null,
      newBalance?: PromiseOrValue<BigNumberish> | null
    ): ClaimFundsEventFilter;

    "ClaimSaleNFTs(uint256,address,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): ClaimSaleNFTsEventFilter;
    ClaimSaleNFTs(
      id?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): ClaimSaleNFTsEventFilter;

    "NewAuction(uint256,tuple)"(
      auctionId?: PromiseOrValue<BigNumberish> | null,
      newAuction?: null
    ): NewAuctionEventFilter;
    NewAuction(
      auctionId?: PromiseOrValue<BigNumberish> | null,
      newAuction?: null
    ): NewAuctionEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Purchase(uint256,address,address)"(
      saleId?: PromiseOrValue<BigNumberish> | null,
      purchaser?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null
    ): PurchaseEventFilter;
    Purchase(
      saleId?: PromiseOrValue<BigNumberish> | null,
      purchaser?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null
    ): PurchaseEventFilter;

    "SaleCancelled(uint256)"(
      saleId?: PromiseOrValue<BigNumberish> | null
    ): SaleCancelledEventFilter;
    SaleCancelled(
      saleId?: PromiseOrValue<BigNumberish> | null
    ): SaleCancelledEventFilter;

    "SaleCreated(uint256,address,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      nftAddress?: PromiseOrValue<string> | null,
      nftID?: PromiseOrValue<BigNumberish> | null
    ): SaleCreatedEventFilter;
    SaleCreated(
      id?: PromiseOrValue<BigNumberish> | null,
      nftAddress?: PromiseOrValue<string> | null,
      nftID?: PromiseOrValue<BigNumberish> | null
    ): SaleCreatedEventFilter;
  };

  estimateGas: {
    auctionIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bid(
      auctionId: PromiseOrValue<BigNumberish>,
      amountFromBalance: PromiseOrValue<BigNumberish>,
      externalFunds: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bids(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buy(
      saleId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      amountToBuy: PromiseOrValue<BigNumberish>,
      amountFromBalance: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelAuction(
      auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelSale(
      saleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelledAuction(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelledSale(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimFunds(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimSaleNfts(
      saleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimableFunds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimed(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAuction(
      isERC721: PromiseOrValue<boolean>,
      nftAddress: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      reservePrice: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createSale(
      isERC721: PromiseOrValue<boolean>,
      nftAddress: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    escrow(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionStatus(
      auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctions(
      pageNo: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSaleStatus(
      saleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSales(
      pageNo: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    highestBidder(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    purchased(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolveAuction(
      auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    saleIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    sales(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    auctionIdCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bid(
      auctionId: PromiseOrValue<BigNumberish>,
      amountFromBalance: PromiseOrValue<BigNumberish>,
      externalFunds: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bids(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buy(
      saleId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      amountToBuy: PromiseOrValue<BigNumberish>,
      amountFromBalance: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelAuction(
      auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelSale(
      saleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelledAuction(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelledSale(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimFunds(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimSaleNfts(
      saleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimableFunds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimed(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createAuction(
      isERC721: PromiseOrValue<boolean>,
      nftAddress: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      reservePrice: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createSale(
      isERC721: PromiseOrValue<boolean>,
      nftAddress: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    escrow(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionStatus(
      auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctions(
      pageNo: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSaleStatus(
      saleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSales(
      pageNo: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    highestBidder(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchased(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolveAuction(
      auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    saleIdCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sales(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
