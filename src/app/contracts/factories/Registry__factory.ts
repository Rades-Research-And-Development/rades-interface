/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Registry, RegistryInterface } from "../Registry";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AllCurrencyApproved",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "changed",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "status",
        type: "bool",
      },
    ],
    name: "ContractStatusChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "changed",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "status",
        type: "bool",
      },
    ],
    name: "CurrencyStatusChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newFee",
        type: "uint256",
      },
    ],
    name: "FeeChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newScale",
        type: "uint256",
      },
    ],
    name: "ScaleChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "newWallet",
        type: "address",
      },
    ],
    name: "SystemWalletUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "approveAllCurrencies",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "approvedCurrencies",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "salePrice",
        type: "uint256",
      },
    ],
    name: "feeInfo",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "platformContracts",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        internalType: "bool",
        name: "status",
        type: "bool",
      },
    ],
    name: "setContractStatus",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenContract",
        type: "address",
      },
      {
        internalType: "bool",
        name: "status",
        type: "bool",
      },
    ],
    name: "setCurrencyStatus",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "newFee",
        type: "uint64",
      },
    ],
    name: "setFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "newScale",
        type: "uint64",
      },
    ],
    name: "setScale",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newWallet",
        type: "address",
      },
    ],
    name: "setSystemWallet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a336100a5565b73aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa60005260046020527fe33a36353cdfbeb15ea87d592415c9f9fa566b043dc4b5f31833f39fada62b148054600160ff19909116811790915580546001600160e01b03191630600160a01b600160e01b03191617604b60a21b179055600280546127106001600160401b03199091161790556100f5565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61074a806101046000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806381c81cdc1161007157806381c81cdc1461014c5780638da5cb5b1461015f578063d779ea581461017a578063e44f5c501461018d578063ec1406ea146101bf578063f2fde38b146101d257600080fd5b806315e5d473146100b95780635a630d7a146100f1578063642be404146101065780636f2a909114610129578063715018a61461013c578063753d5bd614610144575b600080fd5b6100dc6100c7366004610624565b60046020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6101046100ff366004610646565b6101e5565b005b6100dc610114366004610624565b60036020526000908152604090205460ff1681565b610104610137366004610670565b610250565b6101046102fe565b610104610312565b61010461015a366004610670565b61036c565b6000546040516001600160a01b0390911681526020016100e8565b610104610188366004610646565b6103ee565b6101a061019b3660046106ac565b610446565b604080516001600160a01b0390931683526020830191909152016100e8565b6101046101cd366004610624565b61048e565b6101046101e0366004610624565b6104e0565b6101ed61055e565b6001805467ffffffffffffffff60a01b1916600160a01b67ffffffffffffffff8416908102919091179091556040519081527f6bbc57480a46553fa4d156ce702beef5f3ad66303b0ed1a5d4cb44966c6584c3906020015b60405180910390a150565b61025861055e565b600054600160a01b900460ff1615610283576040516366117d1f60e01b815260040160405180910390fd5b6001600160a01b03821660009081526004602052604090205460ff161515811515146102fa576001600160a01b038216600081815260046020526040808220805460ff191685151590811790915590519092917f6e58e43a98d8e1aecb41fbdcad228de200d69e36c3f5b48c9b7cf758e6d7083291a35b5050565b61030661055e565b61031060006105b8565b565b61031a61055e565b600054600160a01b900460ff16610310576000805460ff60a01b1916600160a01b178155604051600191907f6e58e43a98d8e1aecb41fbdcad228de200d69e36c3f5b48c9b7cf758e6d70832908290a3565b61037461055e565b6001600160a01b03821660009081526003602052604090205460ff161515811515146102fa576001600160a01b038216600081815260036020526040808220805460ff191685151590811790915590519092917fd1cd265923267e7363c8fd778538639a7688684e9bb228979fd0177f0cbb23ad91a35050565b6103f661055e565b6002805467ffffffffffffffff191667ffffffffffffffff83169081179091556040519081527fb0291011f4fe5f02e6c601e9e3fee95af95ed9ef50ce85f004a1c6f5a9a9ebd390602001610245565b60015460025460009182916001600160a01b0382169167ffffffffffffffff9182169161047b91600160a01b900416866106c5565b61048591906106f2565b91509150915091565b61049661055e565b600180546001600160a01b0319166001600160a01b0383169081179091556040517fbfec2b9c4a0a024ab97d025ceb52ac9d40b7405bc450983de2a6c65ba7a34a0290600090a250565b6104e861055e565b6001600160a01b0381166105525760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61055b816105b8565b50565b6000546001600160a01b031633146103105760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610549565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461061f57600080fd5b919050565b60006020828403121561063657600080fd5b61063f82610608565b9392505050565b60006020828403121561065857600080fd5b813567ffffffffffffffff8116811461063f57600080fd5b6000806040838503121561068357600080fd5b61068c83610608565b9150602083013580151581146106a157600080fd5b809150509250929050565b6000602082840312156106be57600080fd5b5035919050565b60008160001904831182151516156106ed57634e487b7160e01b600052601160045260246000fd5b500290565b60008261070f57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220e51122b3975813795eac6ae78486b14ec9c67e0091f960f98fc7ed306ae4948364736f6c634300080f0033";

type RegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Registry__factory extends ContractFactory {
  constructor(...args: RegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Registry> {
    return super.deploy(overrides || {}) as Promise<Registry>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Registry {
    return super.attach(address) as Registry;
  }
  override connect(signer: Signer): Registry__factory {
    return super.connect(signer) as Registry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RegistryInterface {
    return new utils.Interface(_abi) as RegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Registry {
    return new Contract(address, _abi, signerOrProvider) as Registry;
  }
}
